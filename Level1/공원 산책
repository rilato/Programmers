#include <string>
#include <vector>
#include <queue>

using namespace std;

vector<int> solution(vector<string> park, vector<string> routes) {
    vector<int> answer;
    queue <pair <int, int>> q;
    
    for (int i = 0; i < park.size(); i++) {
        for (int j = 0; j < park[i].size(); j++) {
            if (park[i][j] == 'S') {
                q.push({ i, j });
            }
        }
    }
    
    for (int i = 0; i < routes.size(); i++) {
        char dir = routes[i][0];
        int mov = routes[i][2] - '0';
        
        int r = q.front().first;
        int c = q.front().second;
        
        q.pop();
        
        if (dir == 'N') {
            if (r - mov < 0) {
                q.push({ r, c });
            }
            else {
                bool flag = true;
                
                for (int j = 1; j <= mov; j++) {
                    if (park[r - j][c] == 'X') {
                        flag = false;
                        break;
                    }
                }
                
                if (!flag) {
                    q.push({ r, c });
                }
                else {
                    q.push({ r - mov, c });
                }
            }
        }
        else if (dir == 'S') {
            if (r + mov >= park.size()) {
                q.push({ r, c });
            }
            else {
                bool flag = true;
                
                for (int j = 1; j <= mov; j++) {
                    if (park[r + j][c] == 'X') {
                        flag = false;
                        break;
                    }
                }
                
                if (!flag) {
                    q.push({ r, c });
                }
                else {
                    q.push({ r + mov, c });
                }
            }
        }
        else if (dir == 'W') {
            if (c - mov < 0) {
                q.push({ r, c });
            }
            else {
                bool flag = true;
                
                for (int j = 1; j <= mov; j++) {
                    if (park[r][c - j] == 'X') {
                        flag = false;
                        break;
                    }
                }
                
                if (!flag) {
                    q.push({ r, c });
                }
                else {
                    q.push({ r, c - mov });
                }
            }
        }
        else if (dir == 'E') {
            if (c + mov >= park[0].size()) {
                q.push({ r, c });
            }
            else {
                bool flag = true;
                
                for (int j = 1; j <= mov; j++) {
                    if (park[r][c + j] == 'X') {
                        flag = false;
                        break;
                    }
                }
                
                if (!flag) {
                    q.push({ r, c });
                }
                else {
                    q.push({ r, c + mov });
                }
            }
        }
    }
    
    answer.push_back(q.front().first);
    answer.push_back(q.front().second);
    
    return answer;
}
