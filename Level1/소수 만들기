#include <vector>
#include <iostream>

using namespace std;

int answer = 0;
vector <int> v;
vector <int> temp;
vector <bool> isPrime;
vector <bool> visited;

void Backtracking(int depth, int num);

int solution(vector<int> nums) {
    v = nums;
    isPrime.resize(3001);
    visited.resize(nums.size());
    
    for (int i = 2; i <= 3000; i++) {
        if (!isPrime[i]) {
            for (int j = i + i; j <= 3000; j += i) {
                isPrime[j] = true;
            }
        }
    }
    
    Backtracking(0, 0);

    return answer;
}

void Backtracking(int depth, int num) {
    if (depth == 3) {
        int sum = 0;
        
        for (int i = 0; i < 3; i++) {
            sum += temp[i];
        }
        
        if (!isPrime[sum]) {
            answer++;
        }
        
        return;
    }
    
    for (int i = num; i < v.size(); i++) {
        if (!visited[i]) {
            visited[i] = true;
            temp.push_back(v[i]);
            Backtracking(depth + 1, i + 1);
            temp.pop_back();
            visited[i] = false;
        }
    }
}
