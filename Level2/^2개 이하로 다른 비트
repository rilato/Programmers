// 홀수인 경우를 계산하지 못했다.
// https://ansohxxn.github.io/programmers/148/

#include <string>
#include <vector>

using namespace std;

vector<long long> solution(vector<long long> numbers) {
    vector<long long> answer;
    
    for (int i = 0; i < numbers.size(); ++i) {
        // 짝수인 경우 1을 더하여 맨 마지막 비트를 0 -> 1로 바꾸면 그만
        if (numbers[i] % 2 == 0)
            answer.push_back(numbers[i] + 1);
        // 홀수인 경우, 맨 마지막 비트가 1이므로, 올림을 생각해주어야 함
        // 101111 이렇게 연속된 4 개의 1 비트를 가진 수의 f 값을 찾고자 한다면, 1'01'111 -> 1'10'111 이 되어야 함
        // 즉, 연속된 1 비트의 개수가 n 개라고 할 때, n - 1 자리의 비트 수만큼 더해진게 f 값이 된다고 할 수 있음. 101111 의 f 값은 000111 를 더한 값이 되는 것.
        else {
            long long bit = 1;
            while (true) {
                if ((numbers[i] & bit) == 0)
                    break;
                bit *= 2;
            }
            bit = bit / 2;
            answer.push_back(numbers[i] + bit);
        }
    }
    
    return answer;
}
