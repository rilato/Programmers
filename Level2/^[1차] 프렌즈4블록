// 2 x 2 블록을 터뜨린 후, 아래로 블록을 내리는 로직에서,
// 블록을 아래로 내리고 난 후 비워진 자리도 채워야 하므로, 조건에 board[i][j] == ' '도 있어야 한다! (58번째 줄)

#include <string>
#include <vector>
#include <iostream>

using namespace std;

int solution(int m, int n, vector<string> board) {
    int answer = 0;
    
//     for (int i = 0; i < board.size(); i++) {
//         for (int j = 0; j < board[i].size(); j++) {
//             cout << board[i][j];
//         }
//         cout << '\n';
//     }

//     cout << '\n';
    
    while(1) {
        bool flag = false;
        vector <vector <bool>> visited;
        visited.resize(board.size(), vector <bool>(board[0].size()));
        
        for (int i = 0; i < board.size() - 1; i++) {
            for (int j = 0; j < board[i].size() - 1; j++) {
                if (board[i][j] == ' ') {
                    continue;
                }
                if (board[i][j] == board[i + 1][j] && board[i][j] == board[i][j + 1] && board[i][j] == board[i + 1][j + 1]) {
                    visited[i][j] = true;
                    visited[i + 1][j] = true;
                    visited[i][j + 1] = true;
                    visited[i + 1][j + 1] = true;
                    // 지울 수 있는 것이 있으므로, flag = true
                    flag = true;
                }
            }
        }
        
        if (flag == false) {
           break;
        }
        
        for (int i = 0; i < board.size(); i++) {
            for (int j = 0; j < board[i].size(); j++) {
                if (visited[i][j]) {
                    answer++;
                }
            }
        }
        
        // 빈 공간 생긴거 채우기
        for (int j = 0; j < board[0].size(); j++) {
            for (int i = board.size() - 1; i >= 0; i--) {
                // 옮기고 난 후 비워진 자리도 채워야 하므로, 조건에 board[i][j] == ' '도 있어야 한다!
                if (visited[i][j] || board[i][j] == ' ') {
                    // 일단 자리 비우기
                    board[i][j] = ' ';
                    for (int k = i - 1; k >= 0; k--) {
                        if (!visited[k][j] && board[k][j] != ' ') {
                            // 조건 만족하는 애 있으면 비어있는 자리 채우기
                            board[i][j] = board[k][j];
                            // 이동한 애의 자리 비우기
                            board[k][j] = ' ';
                            break;
                        }
                    }
                }
            }
        }
        
//         for (int i = 0; i < board.size(); i++) {
//             for (int j = 0; j < board[i].size(); j++) {
//                 cout << board[i][j];
//             }
//             cout << '\n';
//         }
        
//         cout << '\n';
    }
    
    return answer;
}
