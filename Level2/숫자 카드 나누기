#include <string>
#include <vector>
#include <algorithm>
#include <iostream>

using namespace std;

int GCD(int a, int b);

int solution(vector<int> arrayA, vector<int> arrayB) {
    int answer = 0;
    int gcdA = arrayA[0];
    int gcdB = arrayB[0];
    bool flagA = true;
    bool flagB = true;
    
    // A의 최대공약수 찾기
    for (int i = 1; i < arrayA.size(); i++) {
        gcdA = GCD(gcdA, arrayA[i]);
    }
    
    // A의 최대공약수가 B에 나누어 떨어지지 않는지 확인
    // 만약 최대공약수로 나누어 떨어진다면, 최대공약수의 약수도 나누어 떨어지므로, 더이상 계산할 필요가 없음.
    for (int i = 0; i < arrayB.size(); i++) {
        if (arrayB[i] % gcdA == 0) {
            flagA = false;
            break;
        }
    }
    
    // B의 최대공약수 찾기
    for (int i = 1; i < arrayB.size(); i++) {
        gcdB = GCD(gcdB, arrayB[i]);
    }
    
    // B의 최대공약수가 A에 나누어 떨어지지 않는지 확인
    for (int i = 0; i < arrayA.size(); i++) {
        if (arrayA[i] % gcdB == 0) {
            flagB = false;
            break;
        }
    }
    
    //cout << "gcdA : " << gcdA << ", gcdB : " << gcdB;
    
    if (flagA && flagB) {
        answer = max(gcdA, gcdB);
    }
    else if (flagA) {
        answer = gcdA;
    }
    else if (flagB) {
        answer = gcdB;
    }
    
    return answer;
}

int GCD(int a, int b) {
    while (b) {
        int c = a % b;
        a = b;
        b = c;
    }
    
    return a;
}
