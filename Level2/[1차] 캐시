// queue는 erase가 없고, deque가 erase가 있다.
// 또한 queue, stack은 index 접근이 불가능하지만, deque는 인덱스 접근이 가능하다.

//#include <iostream>
#include <string>
#include <vector>
#include <queue>

using namespace std;

int solution(int cacheSize, vector<string> cities) {
    int time = 0;
    deque <string> dq;
    
    for (int i = 0; i < cities.size(); i++) {
        string city = "";
        
        // 도시 이름 소문자 변환
        for (int j = 0; j < cities[i].size(); j++) {
            city += tolower(cities[i][j]);
        }
        
        // 초반 cities 배열에서 cacheSize 만큼 집어넣을때 cities 배열의 0번째부터 cacheSize의 인덱스에서 같은 도시가 있을 경우 오류가 발생할 수 있다.
        // if (dq.empty() || dq.size() != cacheSize) {
        //     dq.push_front(city);
        //     time += 5;
        // }
        
        // cache hit인지 miss인지 판단
        bool hit = false;
        int idx = 0;
        
        for (int j = 0; j < dq.size(); j++) {
            // cache hit
            if (dq[j] == city) {
                hit = true;
                idx = j;
                break;
            }
        }
        
        // cache hit
        if (hit) {
            time += 1;
            dq.push_back(dq[idx]);
            dq.erase(dq.begin() + idx);
        }
        
        // cache miss
        if (!hit) {
            time += 5;
            
            // cache가 다 채워지지 않은 경우
            if (dq.size() < cacheSize) {
                dq.push_back(city);
            }
            // cache가 다 채워진 경우, city를 넣고 맨 앞에거 제거
            else {
                dq.push_back(city);
                dq.pop_front();
            }
        }
        
        //cout << "time : " << time << '\n';
    }
    
    return time;
}
