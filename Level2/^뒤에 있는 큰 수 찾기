// 시간 초과가 난 풀이

#include <string>
#include <vector>

using namespace std;

vector<int> solution(vector<int> numbers) {
    vector<int> answer;
    
    for (int i = 0; i < numbers.size(); i++) {
        bool flag = false;
        
        for (int j = i + 1; j < numbers.size(); j++) {
            if (numbers[j] > numbers[i]) {
                answer.push_back(numbers[j]);
                flag = true;
                break;
            }
        }
        
        if (!flag) {
            answer.push_back(-1);
        }
    }
    
    return answer;
}

// 옳은 풀이
// 스택을 활용하여, 시간을 줄인다.

#include <string>
#include <vector>
#include <stack>

using namespace std;

vector<int> solution(vector<int> numbers) {
    vector<int> answer(numbers.size());
    stack<int> s;
 
    for (int i = numbers.size() - 1; i >= 0; --i) {
        // 나보다 바로 뒤에 잇는 큰 수를 찾기 위해, while문으로 stack을 돌며, 필요 없는 값은 빼낸다.
        while (1) {
            if (s.empty()) {
                answer[i] = -1;
                break;
            }
 
            if (s.top() > numbers[i]) {
                answer[i] = s.top();
                break;
            }
 
            s.pop();
        }
        
        s.push(numbers[i]);
    }
    
    return answer;
}
