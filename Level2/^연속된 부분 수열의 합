// sum을 s[0]으로 초기화한다.
// 투 포인터의 while문의 조건은 left < right 또는 left <= right가 대부분이다.
// left, right 모두 인덱스가 0부터 시작하는 경우, left <= right을 while문의 조건문으로 넣어주고, right의 포인터가 배열의 범위를 벗어나는 순간 탈출하도록 설계한다.
// if문 내부에서 right++과 left++의 순서가 다르다!

// sum을 s[0]으로 초기화한다.

#include <string>
#include <vector>
#include <climits>
#include <iostream>

using namespace std;

vector<int> solution(vector<int> sequence, int k) {
    vector<int> answer;
    int minLen = INT_MAX;
    int sum = sequence[0];
    int left = 0;
    int right = 0;
    int ansLeft = 0;
    int ansRight = 0;
    
    while (left <= right) {
        //cout << "sum : " << sum << ", left : " << left << ", right : " << right << '\n';
        
        if (sum == k) {
            if (right - left < minLen) {
                minLen = right - left;
                ansLeft = left;
                ansRight = right;
            }
            
            if (minLen == 0) {
                break;
            }
            
            else if (minLen != 0) {
                right++;
                
                if (right == sequence.size()) {
                    break;
                }
                
                sum += sequence[right];
            }
        }
        else if (sum < k) {
            right++;
            
            if (right == sequence.size()) {
                break;
            }
            
            sum += sequence[right];
        }
        else {
            sum -= sequence[left];
            left++;
        }
    }

    answer.push_back(ansLeft);
    answer.push_back(ansRight);
    
    return answer;
}
