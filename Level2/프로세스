#include <vector>
#include <algorithm>
#include <queue>
#include <iostream>

using namespace std;

int solution(vector<int> priorities, int location) {
    int answer = 0;
    queue <pair <int, int>> q;  // {index, 우선순위}
    priority_queue <int> pq;    // pq에는 우선순위가 높은 값부터 heap 자료구조에 맞게 정렬되어 들어감
    
    for (int i = 0; i < priorities.size(); i++) {
        q.push({ i, priorities[i]});
        pq.push(priorities[i]);
    }
    
    // 큐가 빌 때 까지 실행
    while (!q.empty()) {
        int nowPriority = pq.top();
        int idx = q.front().first;
        int priority = q.front().second;
        
        // cout << "nowPriority : " << nowPriority << ", idx : " << idx << ", priority : " << priority << '\n';
        
        if (nowPriority == priority) {
            // 우선순위가 같으면 실행 (answer++)
            answer++;
            // pq의 top 제거
            pq.pop();
            
            // cout << "answer : " << answer << '\n';
            
            
            // location까지 같다면, 종료
            if (idx == location) {
                break;
            }
            // location이 다르다면 큐의 뒤에 넣기
            else {
                q.push({ idx, priority });
                q.pop();
            }
        }
        else {
            // 우선순위가 다르면 큐의 뒤에 넣기
            q.push({ idx, priority });
            q.pop();
        }
    }
    
    return answer;
}
