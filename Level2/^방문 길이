// 2차원 배열을 1차원처럼 생각하여 풀었다.
// 0 1 2 3 4 5 6 7 8 9 10
// 11 12 13 14 15 16 17 18 19 20 ...

// dirs[i] == 'L'인 조건에서, now가 0인 경우, 조건을 잘 따져주어야 한다. (seg fault가 발생하지 않도록)

#include <string>
#include <vector>
#include <queue>

using namespace std;

int solution(string dirs) {
    int answer = 0;
    
    // 0 1 2 3 4 5 6 7 8 9 10
    // 11 12 13 14 15 16 17 18 19 20 ...
    
    // 60이 (0, 0)
    vector <int> v(121);
    vector <vector <int>> visitedRoad(121);
    queue <int> q;
    
    q.push(60);
    
    for (int i = 0; i < dirs.size(); i++) {
        int now = q.front();
        int next;
        
        q.pop();
        
        if (dirs[i] == 'U') {
            next = now - 11;
            
            if (next < 0) {
                q.push(now);
                continue;
            }
        }
        if (dirs[i] == 'D') {
            next = now + 11;
            
            if (next > 120) {
                q.push(now);
                continue;
            }
        }
        if (dirs[i] == 'L') {
            next = now - 1;
            
            // L        / next L
            // now : 0  / next : 0
            // 11       / next : 10
            // 22       / next : 21
            // 33       / next : 32
            // => 11로 나누었을 때 나머지가 10인 애들
            if (next % 11 == 10 || now == 0) {
                q.push(now);
                continue;
            }
        }
        if (dirs[i] == 'R') {
            next = now + 1;
            
            // R        / next R
            // now : 10 / next : 11
            // 21       / next : 22
            // 32       / next : 33
            // 120      / next : 120
            // => 11로 나누었을 때 나머지가 0인 애들
            if (next % 11 == 0) {
                q.push(now);
                continue;
            }
        }
        
        for (int j = 0; j < visitedRoad[now].size(); j++) {
            // 이미 방문한 길
            if (visitedRoad[now][j] == next) {
                answer--;
                break;
            }
        }
        
        answer++;
        visitedRoad[now].push_back(next);
        visitedRoad[next].push_back(now);
        q.push(next);
    }
    
    return answer;
}


// 다른 사람의 풀이


2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
#include <cstring>
#include <string>
using namespace std;

int dy[4] = {0, 0, 1, -1}; // R - L - D - U
int dx[4] = {1, -1, 0, 0};
bool check[11][11][11][11] = {0};

int solution(string dirs)
{
    int answer = 0;

    int y = 5;
    int x = 5;

    memset(check, false, sizeof(check));

    for(int i=0; i<dirs.length(); ++i) {
        int dir;
        if(dirs[i]=='R') dir = 0;
        else if(dirs[i]=='L') dir = 1;
        else if(dirs[i]=='D') dir = 2;
        else if(dirs[i]=='U') dir = 3;

        int ny = y + dy[dir];
        int nx = x + dx[dir];
        if(ny < 0 || nx < 0 || ny > 10 || nx > 10) {
            continue;
        }
        if(!check[y][x][ny][nx]) {
            answer++;
            check[y][x][ny][nx] = check[ny][nx][y][x] = true;
        }
        y = ny;
        x = nx;
    }

    return answer;
}
