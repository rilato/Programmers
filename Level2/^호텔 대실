// 백준의 "회의실 배정" 문제와 다르게, 시작 시간을 기준으로 정렬한다.
// 시작 시간을 기준으로 정렬하는 지, 끝 시간을 기준으로 정렬하는 지, 결과가 달라진다.


// 틀린 풀이
// 끝 시간을 기준으로 정렬 후 풀었다.

#include <string>
#include <vector>
#include <algorithm>
#include <iostream>

using namespace std;

int solution(vector<vector<string>> book_time) {
    int answer = 0;
    vector<pair<int, int>> meetings; // 끝 시간, 시작 시간 저장

    // 시간을 분 단위로 계산해서 저장
    for (int i = 0; i < book_time.size(); i++) {
        int start = stoi(book_time[i][0].substr(0, 2)) * 60 + stoi(book_time[i][0].substr(3, 2));
        int end = stoi(book_time[i][1].substr(0, 2)) * 60 + stoi(book_time[i][1].substr(3, 2));
        
        meetings.push_back({end, start});
    }

    // 끝 시간을 기준으로 오름차순 정렬, 끝 시간이 같을 경우 시작 시간 오름차순으로 정렬
    sort(meetings.begin(), meetings.end());

    vector<int> rooms; // 각 방의 회의 끝 시간을 저장

    for (int i = 0; i < meetings.size(); i++) {
        int end = meetings[i].first;
        int start = meetings[i].second;
        bool assigned = false;

        // 모든 방을 확인하면서 새 방을 배정해야 하는지 검사
        for (int j = 0; j < rooms.size(); j++) {
            if (rooms[j] <= start) { // 해당 방의 끝 시간과 대실의 시작 시간 비교
                rooms[j] = end; // 해당 방에 새 대실 배정
                assigned = true;
                break;
            }
        }

        if (!assigned) { // 새로운 방이 필요한 경우
            rooms.push_back(end); // 새로운 방 추가
            answer++;
        }
    }

    return answer;
}

// 맞은 풀이
// 시작 시간을 기준으로 정렬 후 풀었다.

#include <string>
#include <vector>
#include <algorithm>
#include <iostream>

using namespace std;

int solution(vector<vector<string>> book_time) {
    int answer = 0;
    vector<pair<int, int>> meetings; // 시작 시간, 끝 시간 저장

    // 시간을 분 단위로 계산해서 저장
    for (int i = 0; i < book_time.size(); i++) {
        int start = stoi(book_time[i][0].substr(0, 2)) * 60 + stoi(book_time[i][0].substr(3, 2));
        int end = stoi(book_time[i][1].substr(0, 2)) * 60 + stoi(book_time[i][1].substr(3, 2));
        
        meetings.push_back({start, end + 10});
    }

    // 시작 시간을 기준으로 오름차순 정렬, 끝 시간이 같을 경우 시작 시간 오름차순으로 정렬
    sort(meetings.begin(), meetings.end());

    vector<int> rooms; // 각 방의 회의 끝 시간을 저장

    for (int i = 0; i < meetings.size(); i++) {
        int start = meetings[i].first;
        int end = meetings[i].second;
        bool assigned = false;

        // 모든 방을 확인하면서 새 방을 배정해야 하는지 검사
        for (int j = 0; j < rooms.size(); j++) {
            if (rooms[j] <= start) { // 해당 방의 끝 시간과 대실의 시작 시간 비교
                rooms[j] = end; // 해당 방에 새 대실 배정
                assigned = true;
                break;
            }
        }

        if (!assigned) { // 새로운 방이 필요한 경우
            rooms.push_back(end); // 새로운 방 추가
            answer++;
        }
    }

    return answer;
}
