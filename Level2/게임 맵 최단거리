#include <vector>
#include <queue>

using namespace std;

int solution(vector <vector <int>> maps) {
    int answer = -1;
    
    int dr[4] = { -1, 1, 0, 0 };
    int dc[4] = { 0, 0, -1, 1 };
    vector <vector <bool>> visited;
    visited.resize(maps.size(), vector <bool>(maps[0].size()));
    
    queue <pair <int, int>> q;
    q.push({ 0, 0 });
    visited[0][0] = true;
    
    while (!q.empty()) {
        int r = q.front().first;
        int c = q.front().second;
        
        if (r == maps.size() - 1 && c == maps[0].size() - 1) {
            answer = maps[r][c];
            break;
        }
        
        q.pop();
        
        for (int i = 0; i < 4; i++) {
            int nr = r + dr[i];
            int nc = c + dc[i];
            
            if (nr < 0 || nc < 0 || nr >= maps.size() || nc >= maps[0].size()) {
                continue;
            }
            
            if (maps[nr][nc] && !visited[nr][nc]) {
                visited[nr][nc] = true;
                maps[nr][nc] = maps[r][c] + 1;
                q.push({ nr, nc });
            }
        }
    }
    
    return answer;
}
