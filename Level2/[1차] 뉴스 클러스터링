#include <string>
#include <map>
#include <set>
#include <iostream>

using namespace std;

int solution(string str1, string str2) {
    int answer = 0;
    map <string, int> m1;
    map <string, int> m2;
    set <string> s;
    double gyo = 0;
    double hap = 0;
    
    // str1 map에 두 글자씩 끊은 단어(소문자로 변환)를 넣고, 그것의 개수를 저장 / set에 해당 문자열 저장
    for (int i = 0; i < str1.size() - 1; i++) {
        if (('a' <= str1[i] && str1[i] <= 'z' || 'A' <= str1[i] && str1[i] <= 'Z') && ('a' <= str1[i + 1] && str1[i + 1] <= 'z' || 'A' <= str1[i + 1] && str1[i + 1] <= 'Z')) {
            string temp = "";
            
            temp += tolower(str1[i]);
            temp += tolower(str1[i + 1]);
            
            m1[temp]++;
            s.insert(temp);
        }
    }
    
    // str2 map에 두 글자씩 끊은 단어(소문자로 변환)를 넣고, 그것의 개수를 저장 / set에 해당 문자열 저장
    for (int i = 0; i < str2.size() - 1; i++) {
        if (('a' <= str2[i] && str2[i] <= 'z' || 'A' <= str2[i] && str2[i] <= 'Z') && ('a' <= str2[i + 1] && str2[i + 1] <= 'z' || 'A' <= str2[i + 1] && str2[i + 1] <= 'Z')) {
            string temp = "";
            
            temp += tolower(str2[i]);
            temp += tolower(str2[i + 1]);
            
            m2[temp]++;
            s.insert(temp);
        }
    }
    
    //for (auto iter = m1.begin(); iter != m1.end(); iter++) {
    //    cout << iter->first << " ";
    //}
    //cout << '\n';
    
    //for (auto iter = m2.begin(); iter != m2.end(); iter++) {
    //    cout << iter->first << " ";
    //}
    //cout << '\n';
    
    // set에서 문자열을 하나 꺼낸 후, 두 개의 map에서 find하며, 존재 여부를 확인
    for (auto iter = s.begin(); iter != s.end(); iter++) {
        string now = *iter;
        
        //cout << "now : " << now << " ";
        
        // 1. 양쪽 map에 같은 문자가 있으면 더 많은 것을 "hap"에 저장, 더 적은 것을 "gyo"에 저장
        if (m1.find(now) != m1.end() && m2.find(now) != m2.end()) {
            if (m1[now] > m2[now]) {
                hap += m1[now];
                gyo += m2[now];
            }
            else {
                hap += m2[now];
                gyo += m1[now];
            }
        }
        // 2. 한 쪽에만 문자가 있다면 "합집합 map"에 저장
        else {
            if (m1.find(now) != m1.end()) {
                hap += m1[now];
            }
            else {
                hap += m2[now];
            }
        }
    }
    
    //cout << "gyo : " << gyo << ", hap : " << hap << '\n';
    
    // 분모가 0이 되는 경우 처리
    if (hap == 0) {
        answer = 65536;
    }
    // gyo / hap의 결과를 소수점으로 얻기 위해, double type 사용
    else {
        answer = ((gyo / hap) * 65536);
    }
    
    return answer;
}
