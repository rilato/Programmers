#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <iostream>

using namespace std;

vector <string> v;
vector <vector <bool>> visited;
queue <pair <int, int>> q;
vector<int> answer;
int dr[4] = {-1, 1, 0, 0};
int dc[4] = {0, 0, -1, 1};

void BFS(int row, int col);

vector<int> solution(vector<string> maps) {
    v = maps;
    
    visited.resize(maps.size(), vector <bool>(maps[0].size()));
    
    for (int i = 0; i < maps.size(); i++) {
        for (int j = 0; j < maps[i].size(); j++) {
            if (maps[i][j] != 'X' && !visited[i][j]) {
                BFS(i, j);
            }
        }
    }
    
    sort(answer.begin(), answer.end());
    
    if (answer.empty()) {
        answer.push_back(-1);
    }
    
    return answer;
}

void BFS(int row, int col) {
    int sum = v[row][col] - '0';

    q.push({row, col});
    visited[row][col] = true;

    //cout << "sum : " << sum << '\n';
    
    while (!q.empty()) {
        int r = q.front().first;
        int c = q.front().second;

        q.pop();

        for (int i = 0; i < 4; i++) {
            int nr = r + dr[i];
            int nc = c + dc[i];
            
            if (nr < 0 || nc < 0 || nr >= v.size() || nc >= v[0].size()) {
                continue;
            }

            if (v[nr][nc] != 'X' && !visited[nr][nc]) {
                visited[nr][nc] = true;
                q.push({nr, nc});
                sum += v[nr][nc] - '0';
                
                //cout << "row : " << nr << ", col : " << nc << ", sum : " << sum << '\n';
            }
        }
    }

    answer.push_back(sum);
}
