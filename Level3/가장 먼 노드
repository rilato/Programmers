#include <string>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

int solution(int n, vector<vector<int>> edge) {
    int answer = 0;
    int maximum = 0;
    vector <vector <int>> v;
    vector <bool> visited;
    vector <int> distance;
    queue <pair <int, int>> q;  // idx, distance
    
    v.resize(edge.size() + 1);
    visited.resize(edge.size() + 1);
    distance.resize(edge.size() + 1);
    
    for (int i = 0; i < edge.size(); i++) {
        int num1 = edge[i][0];
        int num2 = edge[i][1];
        
        v[num1].push_back(num2);
        v[num2].push_back(num1);
    }
    
    q.push({ 1, 0 });
    visited[1] = true;
    distance[1] = 0;
    
    while (!q.empty()) {
        int now = q.front().first;
        int dist = q.front().second;
        
        q.pop();
        
        for (int i = 0; i < v[now].size(); i++) {
            int next = v[now][i];
            
            if (!visited[next]) {
                visited[next] = true;
                distance[next] = dist + 1;
                q.push({ next, dist + 1 });
                maximum = max(maximum, dist + 1);
            }
        }
    }
    
    sort (distance.begin(), distance.end(), greater <int>());
    
    for (int i = 0; i < distance.size(); i++) {
        if (maximum == distance[i]) {
            answer++;
        }
        else if (distance[i] < maximum) {
            break;
        }
    }
    
    return answer;
}
